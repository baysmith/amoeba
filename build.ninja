cc = gcc
cxx = g++
exe = .exe
cflags = -std=c99 -Wall -pedantic -O3

rule cc
  depfile = $out.d
  command = $cc -MMD -MF $out.d $cflags -c $in -o $out
  description = CC $out

rule cxx
  command = $cxx -MMD -MF $out.d $cflags -c $in -o $out
  description = CXX $out

rule link
  command = $cc $linkflags -o $out $in
  description = LINK $out

rule run
  command = $in $args

rule gcov
  command = gcov $in $args

rule format
  command = clang-format -i $in
  description = FORMAT $out

build am_test.o: cc test.c
build am_test$exe: link am_test.o
build test: run am_test$exe

build am_test_cxx.o: cxx test.c
build am_test_cxx$exe: link am_test_cxx.o
build test_cxx: run am_test_cxx$exe

build am_test_cov.o: cc test.c
  cflags = -Wall -pedantic -fprofile-arcs -ftest-coverage
build am_test_cov$exe: link am_test_cov.o
  linkflags = -fprofile-arcs -ftest-coverage

build run_cov_test: run am_test_cov$exe
build cov: gcov am_test_cov.o | run_cov_test

build format: format test.c amoeba.h expected_binary_tree_values.h $
  expected_splitter_values.h

default test
